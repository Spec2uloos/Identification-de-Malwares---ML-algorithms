from win10toast_click import ToastNotifier
import tkinter as tk
import sys
import subprocess

def kill_process(pid):
    try:
        subprocess.call(['taskkill', '/F', '/PID', str(pid)])
        print(f"Process with PID {pid} has been killed.")
    except subprocess.CalledProcessError as e:
        print(f"Error occurred while killing process with PID {pid}: {e}")

def interface(data):
    # Create the main window
    window = tk.Tk()

    # Set the title of the window
    window.title("Label Interface")

    # Create the labels
    label1 = tk.Label(window, text="protocole")
    label2 = tk.Label(window, text=data['protocol_type'])
    label3 = tk.Label(window, text="source ip")
    label4 = tk.Label(window, text=data["src_bytes"])
    label5 = tk.Label(window, text="dest ip")
    label6 = tk.Label(window, text=data["dst_bytes"])
    label7 = tk.Label(window, text="service")
    label8 = tk.Label(window, text=data["service"])
    label9 = tk.Label(window, text="flag")
    label10 = tk.Label(window, text=data["flag"])

    # Create the button
    # button = tk.Button(window, text="Kill process", command=lambda:kill_process(data["pid"]))

    # Arrange the labels and button using grid layout
    label1.grid(row=0, column=0, padx=10, pady=10)
    label2.grid(row=0, column=1, padx=10, pady=10)
    label3.grid(row=1, column=0, padx=10, pady=10)
    label4.grid(row=1, column=1, padx=10, pady=10)
    label5.grid(row=2, column=0, padx=10, pady=10)
    label6.grid(row=2, column=1, padx=10, pady=10)
    label7.grid(row=3, column=0, padx=10, pady=10)
    label8.grid(row=3, column=1, padx=10, pady=10)
    label9.grid(row=4, column=0, padx=10, pady=10)
    label10.grid(row=4, column=1, padx=10, pady=10)
    # button.grid(row=3, column=1, padx=10, pady=10)

    # Start the main event loop
    window.mainloop()

def notify(data):
        toaster = ToastNotifier() 
        toaster.show_toast(
            "Malware detected",
            data["protocol_type"],
            duration=10,
            threaded=True,
            callback_on_click=lambda: interface(data) )
