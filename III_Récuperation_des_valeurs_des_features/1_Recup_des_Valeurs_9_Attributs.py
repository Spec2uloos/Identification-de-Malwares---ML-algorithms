import psutil
import datetime

def get_connection_infos(pid):
    # Récupérer les informations sur les connexions réseau
    connections = psutil.net_connections()

    # Parcourir les connexions réseau
    for connection in connections:
        local_address = connection.laddr.ip
        local_port = connection.laddr.port
        # Vérifier si le tuple raddr contient des éléments
        if len(connection.raddr) >= 2:
            remote_address = connection.raddr[0]  # Accéder à l'adresse IP distante
            remote_port = connection.raddr[1]  # Accéder au port distant
        else:
            remote_address = None
            remote_port = None
        
        if hasattr(connection, 'wrong_fragment'):
            wrong_fragment = connection.wrong_fragment
        else:
            wrong_fragment = None
            
        land = False
        #Permet d'evaluer l'attribut land : en comparant l'addr source et destination.
        if local_address == remote_address and local_port == remote_port:
            land = True
        
        # Vérifier si le PID correspond
        if connection.pid == pid:
            # Récupérer le temps de création du processus associé au PID
            process = psutil.Process(pid)
            process_create_time = datetime.datetime.fromtimestamp(process.create_time())

            # Calculer la durée de la connexion
            current_time = datetime.datetime.now()
            duration = current_time - process_create_time
            return [duration.total_seconds(),land,wrong_fragment]

    return None

# Parcourir les connexions réseau et afficher la durée d'exécution en secondes
for connection in psutil.net_connections():
    # Vérifier si le statut de la connexion est ESTABLISHED
    
    # Récupérer le PID de la connexion
    pid = connection.pid

    # Récupérer la durée d'exécution de la connexion en secondes
    Infos = get_connection_infos(pid)
    duration_seconds = Infos[0]
    land = Infos[1]
    wrong_fragment = Infos[2]
    
    # Récupérer les octets source (src_bytes) et destination (dst_bytes)
    io_counters = psutil.net_io_counters()
    src_bytes = io_counters.bytes_sent
    dst_bytes = io_counters.bytes_recv
    
    # Afficher les informations de la connexion, la durée d'exécution en secondes,
    # et les octets source et destination
    print("IP: ",connection.laddr.ip)
    print("Port: ",connection.laddr.port)
    print("Protocole: ", connection.type)
    print("flag: ",connection.status)
    print("Duration: ", duration_seconds)
    print("Source Bytes: ", src_bytes)
    print("Destination Bytes: ", dst_bytes)
    print("land: ",land)
    print("wrong_fragment: ", wrong_fragment)
    print("---------------------------")
